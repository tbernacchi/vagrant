# -*- mode: ruby -*-
# # vi: set ft=ruby :

##SYSCTL
$sysctl = <<SCRIPT
#!/bin/bash
cat > /etc/sysctl.d/k8s.conf <<-EOF
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo modprobe br_netfilter
sudo sysctl --system

sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo swapoff -a
SCRIPT

##CONTAINERD
$containerd = <<SCRIPT
#!/bin/bash
wget https://github.com/containerd/containerd/releases/download/v1.7.3/containerd-1.7.3-linux-arm64.tar.gz
wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service 
mkdir -p /usr/local/bin/containerd 
`which tar` Cxzvf /usr/local/bin/containerd containerd-1.7.3-linux-arm64.tar.gz
cd /usr/local/bin/containerd/bin
mv /usr/local/bin/containerd/bin/* /usr/local/bin/containerd/
cd /usr/local/bin/containerd/ 
rm -rf bin/
mkdir -p /etc/systemd/system/
cat /home/vagrant/containerd.service > /etc/systemd/system/containerd.service
sed -i 's#/usr/local/bin/containerd#/usr/local/bin/containerd/containerd#g' /etc/systemd/system/containerd.service
echo "export PATH=$PATH:/usr/local/bin/containerd" | tee -a ~vagrant/.bashrc
echo "export PATH=$PATH:/usr/local/bin/containerd" | tee -a ~root/.bashrc
systemctl daemon-reload
systemctl enable containerd
systemctl start containerd
mkdir -p /etc/containerd
/usr/local/bin/containerd/containerd config default > /etc/containerd/config.toml
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
systemctl restart containerd
SCRIPT

##RUNC
$runc = <<SCRIPT
#!/bin/bash
wget https://github.com/opencontainers/runc/releases/download/v1.1.9/runc.arm64
install -m 755 runc.arm64 /usr/local/sbin/runc
SCRIPT


##K8S
$k8s = <<SCRIPT
#!/bin/bash 
POD_NEWORK_CIDR=192.168.0.0/16
API_SERVER_ADVERTISE_ADDR=`hostname -I | awk '{ print $2 }'`

apt-get install -y apt-transport-https ca-certificates curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet=1.27.0-00 kubeadm=1.27.0-00 kubectl=1.27.0-00
apt-mark hold kubelet kubeadm kubectl

sudo kubeadm init --kubernetes-version=v1.27.0 --ignore-preflight-errors=NumCPU --skip-token-print --pod-network-cidr="$POD_NETWORK_CIDR" --apiserver-advertise-address="$API_SERVER_ADVERTISE_ADDR"
sleep 40

mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
export KUBECONFIG=/etc/kubernetes/admin.conf | tee -a ~/.bashrc
curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml -O
kubectl apply -f calico.yaml
SCRIPT

##Vagrant
Vagrant.configure("2") do |config|

#Box
config.vm.box = "bento/ubuntu-20.04-arm64"
 
 config.vm.define :mycks do |mycks|
 mycks.vm.provider :virtualbox do |v|
   v.name = "mycks"
   v.cpus = 2
   v.customize ["modifyvm", :id, "--memory", "4096"]
   v.customize ['createhd', '--filename', 'file_2_disk1', '--size', 50 * 1024]
   v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', 'file_2_disk1']
 end
 mycks.vm.network :private_network, ip: "192.168.33.103"
 mycks.vm.hostname = "mycks"
 mycks.vm.provision :shell, :inline => $sysctl
 mycks.vm.provision :shell, :inline => $containerd
 mycks.vm.provision :shell, :inline => $runc
 mycks.vm.provision :shell, :inline => $k8s
 mycks.vm.provision :hostmanager
 end

end
